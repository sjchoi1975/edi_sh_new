# Cursor Project Rules: Pharmaceutical Performance Management System (Shinil Pharm) – 10-Day Plan


## 🧭 User Interaction Rules (for Cursor AI)
- Use **Korean** in all chat responses.
- Assume the user is a **non-developer**; proceed **one step at a time**.
- When asked a question, **do not explain too much** — just say **what to do next**, clearly and briefly.
- **Do not write code** unless the user explicitly asks for it.
- **Do not apply or implement** anything unless the user gives direct instructions to do so.

---

## ✅ Project Overview
- Objective: Build a performance management system using Vue.js + Supabase within 10 days
- Target users: 1 administrator (pharma) and multiple users (CSO companies)
- Development method: Non-developer + Cursor AI collaborative build
- Deployment: Vercel (frontend only); Supabase handles backend functions

---

## ✅ Technology Stack (Minimal Setup)

| Area         | Tools                                 | Notes                                  |
|--------------|----------------------------------------|----------------------------------------|
| Frontend     | Vue.js + PrimeVue + Supabase JS Client| Simplified UI and API integration      |
| CSS          | PrimeVue built-in themes              | No need for external frameworks        |
| Backend (BaaS)| Supabase                             | Covers auth, DB, storage, and API      |
| Authentication | Supabase Auth                       | Email/password login only              |
| Database     | Supabase PostgreSQL via Console       | No SQL required                        |
| File Storage | Supabase Storage                      | For uploading supporting documents     |
| Deployment   | Vercel or Netlify                     | Frontend deployment only               |

---

## ❌ Excluded or Unnecessary Elements

- ❌ Bootstrap, Vuetify, Material UI → PrimeVue is sufficient and avoids style conflicts
- ❌ Node.js + Express → Not needed (Supabase replaces backend)
- ❌ Axios → Not needed (use Supabase JS Client)
- ❌ Vuex or other state managers → Use local component state

---

## ✅ Core Features to Implement

1. User registration/login (email-based)
2. Admin approval system
3. CRUD for companies/products/clients/pharmacies
4. Performance data entry and lookup
5. File upload (e.g., supporting documents)
6. Notice board (CRUD, pin-to-top, view count)
7. Basic filters, view modes, and UI cleanup
8. Deployment and user manuals

---

## ✅ 10-Day Development Schedule

### 📅 Day 1
- Initialize Vue project
- Install PrimeVue/Supabase packages
- Set up Supabase project and design Member/Product tables

### 📅 Day 2
- Integrate Supabase Auth
- Build login/signup/logout screens
- Design admin approval process

### 📅 Day 3
- Finalize DB schema (include notice board)
- Setup relationships and RLS rules
- Validate auth-to-table link

### 📅 Day 4
- Build CRUD for companies/products
- Build CRUD for notices (title, content, required toggle, view count)

### 📅 Day 5
- Build client/pharmacy CRUD
- Implement mapping between company↔client↔pharmacy

### 📅 Day 6
- Build performance input UI
- Add validation and month selectors

### 📅 Day 7
- Connect Supabase Storage for file uploads
- Build views for performance data
- Display pinned notices at top

### 📅 Day 8
- Final UI/UX polish (layout, filters, pagination)
- Filter/search for notice board

### 📅 Day 9
- Full feature testing and bug fixing
- Confirm behavior for notice views, editing

### 📅 Day 10
- Deploy to Vercel
- Write admin/user manuals
- Final code cleanup

---

## ✅ Cursor AI Prompt Examples

- `Create a PrimeVue DataTable to list companies and load the data from Supabase.`
- `Build login/signup components and connect them to Supabase Auth.`
- `From the notices table, show items with 'required' = true at the top.`
- `Use Supabase Storage to upload files and return download URLs.`

---

## ✅ Other Notes

- All code should be written as Vue components
- Use `npm run build` for production
- Store Supabase credentials in `.env.local` (exclude from version control)

