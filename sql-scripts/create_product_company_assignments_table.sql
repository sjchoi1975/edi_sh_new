-- 제품별 업체 활성/비활성 관리 테이블 생성
-- 2025-01-07

-- 1. product_company_assignments 테이블 생성
CREATE TABLE IF NOT EXISTS product_company_assignments (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    product_id uuid NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    company_id uuid NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    is_active boolean NOT NULL DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    created_by uuid REFERENCES auth.users(id),
    updated_by uuid REFERENCES auth.users(id),
    
    -- 제품-업체 조합은 유일해야 함
    UNIQUE(product_id, company_id)
);

-- 2. 인덱스 생성 (성능 최적화)
CREATE INDEX IF NOT EXISTS idx_product_company_assignments_product_id 
ON product_company_assignments(product_id);

CREATE INDEX IF NOT EXISTS idx_product_company_assignments_company_id 
ON product_company_assignments(company_id);

CREATE INDEX IF NOT EXISTS idx_product_company_assignments_active 
ON product_company_assignments(is_active);

-- 3. RLS 활성화
ALTER TABLE product_company_assignments ENABLE ROW LEVEL SECURITY;

-- 4. RLS 정책 설정

-- 기존 정책 삭제 (이미 존재하는 경우)
DROP POLICY IF EXISTS "Admins can manage all product-company assignments" ON product_company_assignments;
DROP POLICY IF EXISTS "Users can view their own product-company assignments" ON product_company_assignments;

-- 관리자는 모든 제품-업체 매핑 관리 가능
CREATE POLICY "Admins can manage all product-company assignments" 
ON product_company_assignments 
FOR ALL USING (
    EXISTS (
        SELECT 1 FROM companies 
        WHERE user_id = auth.uid() 
        AND user_type = 'admin'
    )
);

-- 일반 사용자는 자신의 업체 매핑만 조회 가능
CREATE POLICY "Users can view their own product-company assignments" 
ON product_company_assignments 
FOR SELECT USING (
    company_id IN (
        SELECT id FROM companies 
        WHERE user_id = auth.uid()
    )
);

-- 5. updated_at 자동 업데이트 트리거 함수 생성
CREATE OR REPLACE FUNCTION update_product_company_assignments_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 6. 트리거 생성
CREATE TRIGGER trigger_update_product_company_assignments_updated_at
    BEFORE UPDATE ON product_company_assignments
    FOR EACH ROW
    EXECUTE FUNCTION update_product_company_assignments_updated_at();

-- 7. 테이블 생성 확인
SELECT 
    table_name,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'product_company_assignments'
ORDER BY ordinal_position;

-- 8. 정책 확인
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual
FROM pg_policies 
WHERE tablename = 'product_company_assignments'; 